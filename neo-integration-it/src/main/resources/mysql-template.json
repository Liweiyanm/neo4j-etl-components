{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template: Create a single EC2 instance and a local MySQL database for storage. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "AMI": {
      "Default": "ami-bdfbccca",
      "Description" : "AMI ID",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64"
    },

    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUser": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword": {
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "ClientLocation" : {
      "Description" : "The IP address range that can be used to connect to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources" : {

    "DatabaseServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : {"Ref" : "AMI"},
        "InstanceType"   : "m3.medium",
        "SecurityGroups" : [ {"Ref" : "DatabaseServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags"           : [ { "Key" : "Name", "Value" : "MySQL Database Server" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",

          "apt-get update\n",
          "apt-get -y dist-upgrade\n",

          "apt-get -y install python-setuptools\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

          "# Install MySQL\n",
          "DEBIAN_FRONTEND=noninteractive apt-get -q -y install mysql-server\n",
          "apt-get -y install mysql-client\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "' >/var/log/change-password.log 2>&1\n",

          "# Create MySQL user\n",
          "cat <<EOF > /tmp/setup.mysql\n",
          "CREATE USER '", { "Ref" : "DBUser" }, "'@'%' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
          "GRANT ALL PRIVILEGES ON *.* TO '", { "Ref" : "DBUser" }, "'@'%' WITH GRANT OPTION;\n",
          "FLUSH PRIVILEGES;\n",
          "EOF\n",
          "mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql\n",

          "# Update MySQL config\n",
          "echo [server] >> /etc/mysql/my.cnf\n",
          "echo \"bind-address = *\" >> /etc/mysql/my.cnf\n",
          "/etc/init.d/mysql restart\n",

          "# Signal the status from cfn-init\n",
          "/usr/local/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource DatabaseServerInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT10M"
        }
      }
    },

    "DatabaseServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable remote access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "ClientLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "CidrIp" : { "Ref" : "ClientLocation"}}
        ]
      }
    }
  }
}
